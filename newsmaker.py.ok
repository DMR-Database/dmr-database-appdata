#!/usr/bin/python3
import argparse
import mysql.connector
import sys
from datetime import datetime
from tabulate import tabulate  # Install this using: pip install tabulate

# Database connection details
DB_HOST = "192.168.2.111"
DB_USER = "root"
DB_PASS = "EFeVPRJxD3WB"
DB_NAME = "dmr-database"
TABLE_NAME = "app_news"

# Connect to the database
def connect_to_db():
    try:
        conn = mysql.connector.connect(
            host=DB_HOST,
            user=DB_USER,
            password=DB_PASS,
            database=DB_NAME
        )
        return conn
    except mysql.connector.Error as err:
        print(f"Error: {err}")
        sys.exit(1)

# Truncate text to a specified length
def truncate_text(text, length=50):
    if len(text) > length:
        return text[:length] + "..."
    return text

# Insert news into the database
def insert_news(order, urgent, shownews, category, date, header, news):
    conn = connect_to_db()
    cursor = conn.cursor()

    # Convert boolean values to lowercase 'true' or 'false' as strings
    urgent_str = "true" if urgent else "false"
    shownews_str = "true" if shownews else "false"

    # Truncate header to a maximum of 50 characters
    truncated_header = truncate_text(header)

    # Updated query to quote 'order' since it's a reserved SQL keyword
    insert_query = f"""
    INSERT INTO {TABLE_NAME} (`order`, urgent, shownews, category, date, header, news)
    VALUES (%s, %s, %s, %s, %s, %s, %s)
    """
    
    try:
        # Execute the query with 'true' or 'false' as strings for urgent and shownews
        cursor.execute(insert_query, (order, urgent_str, shownews_str, category, date, truncated_header, news))
        conn.commit()
        print(f"News successfully inserted into {TABLE_NAME}.")
    except mysql.connector.Error as err:
        print(f"Failed to insert news: {err}")
    finally:
        cursor.close()
        conn.close()

# List news from the database
def list_news():
    conn = connect_to_db()
    cursor = conn.cursor()

    select_query = f"SELECT `order`, urgent, shownews, category, date, header, news FROM {TABLE_NAME}"
    
    try:
        cursor.execute(select_query)
        records = cursor.fetchall()

        if not records:
            print(f"No records found in {TABLE_NAME}.")
            return

        # Truncate news content and header for table display
        truncated_records = [
            (r[0], r[1], r[2], r[3], r[4], truncate_text(r[5]), truncate_text(r[6]))
            for r in records
        ]

        # Display results in a nice table format using tabulate
        headers = ["Order", "Urgent", "Shownews", "Category", "Date", "Header", "News"]
        print(tabulate(truncated_records, headers, tablefmt="grid"))
        
    except mysql.connector.Error as err:
        print(f"Failed to retrieve news: {err}")
    finally:
        cursor.close()
        conn.close()

# Display help message manually (because argparse doesn't support `-?`)
def display_help():
    print("""
    Usage: newsmaker.py [options]

    Options:
    -o <order>        Order of the news.
    -u <urgent>       Urgent (true or false, defaults to false).
    -s <shownews>     Shownews (true or false, defaults to true).
    -c <category>     Category of the news.
    -d <date>         Date of the news (DD-MM-YYYY).
    -h <header>       News header (max 50 characters).
    -n <news>         Full news content.
    -l                List all news in a readable format.
    --help or -?      Show this help message.
    """)
    sys.exit()

# Validate and convert the date from DD-MM-YYYY to YYYY-MM-DD
def validate_date(date_str):
    try:
        date_obj = datetime.strptime(date_str, "%d-%m-%Y")
        return date_obj.strftime("%d-%m-%Y")
    except ValueError:
        print("Error: Incorrect date format. Please use DD-MM-YYYY.")
        sys.exit(1)

# Convert string to boolean
def str_to_bool(value):
    if value.lower() in ['true', 'false']:
        return value.lower() == 'true'
    else:
        print("Error: Please specify 'true' or 'false' for urgent and shownews.")
        sys.exit(1)

# Main function
def main():
    parser = argparse.ArgumentParser(add_help=False)

    parser.add_argument("-o", "--order", type=int, help="Order of the news")
    parser.add_argument("-u", "--urgent", type=str_to_bool, help="Urgent (true or false, defaults to false)", default=False)
    parser.add_argument("-s", "--shownews", type=str_to_bool, help="Shownews (true or false, defaults to true)", default=True)
    parser.add_argument("-c", "--category", type=str, help="Category of the news")
    parser.add_argument("-d", "--date", type=str, help="Date of the news (DD-MM-YYYY)")
    parser.add_argument("-h", "--header", type=str, help="News header (max 50 characters)")
    parser.add_argument("-n", "--news", type=str, help="Full news content")
    parser.add_argument("-l", "--list", action="store_true", help="List all news in a readable format")
    parser.add_argument("--help", "-?", action="store_true", help="Display help")

    args = parser.parse_args()

    if args.help:
        display_help()

    # If -l is provided, list the content of the table
    if args.list:
        list_news()
        sys.exit()

    # Validate and convert the date if provided
    formatted_date = validate_date(args.date) if args.date else None

    # Insert news into the database if all necessary args are provided
    if all([args.order, args.category, formatted_date, args.header, args.news]):
        insert_news(args.order, args.urgent, args.shownews, args.category, formatted_date, args.header, args.news)
    else:
        print("Error: Missing required arguments for inserting news. Use --help or -? for help.")
        sys.exit(1)

if __name__ == "__main__":
    main()

